# -*- coding: utf-8 -*-
"""Mini-Projet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ydv3d8K7EZwcCa5U2gFAhwUNUz5EY2Oq

**aeroport**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, r2_score

#  Charger les donn√©es
df = pd.read_csv("Airline_Delay_Cause.csv")
#  Nettoyage des donn√©es (suppression des valeurs manquantes)
df.dropna(inplace=True)

#  Cr√©ation de la colonne date et jour de la semaine
df["date"] = pd.to_datetime(df[["year", "month"]].assign(day=1))
df["day_week"] = df["date"].dt.dayofweek  # 0 = Lundi, ..., 6 = Dimanche

#  Encodage des variables cat√©goriques (a√©roport et compagnie a√©rienne)
encoder_airport = LabelEncoder()
encoder_carrier = LabelEncoder()
df["airport"] = encoder_airport.fit_transform(df["airport"])
df["carrier"] = encoder_carrier.fit_transform(df["carrier"])

#  S√©lection des features et de la variable cible
features = ["month", "day_week", "airport", "carrier", "arr_flights", "arr_del15",
            "carrier_ct", "weather_ct", "nas_ct", "security_ct", "late_aircraft_ct"]
target = "arr_delay"

X = df[features]
y = df[target]

#  Normalisation des donn√©es
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#  Division en ensemble d'entra√Ænement et de test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

#  Mod√®le 1 : Gradient Boosting Regressor
gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=5, random_state=42)
try:
    gb_model.fit(X_train, y_train)
    y_pred_gb = gb_model.predict(X_test)
except (KeyboardInterrupt, AttributeError) as e:
    # Handle the KeyboardInterrupt and AttributeError
    y_pred_gb = np.zeros(len(y_test))

#  Mod√®le 2 : SVM Regressor
svm_model = SVR(kernel="rbf", C=100, gamma=0.1)
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)

#  √âvaluation des mod√®les
mae_gb = mean_absolute_error(y_test, y_pred_gb)
r2_gb = r2_score(y_test, y_pred_gb)

mae_svm = mean_absolute_error(y_test, y_pred_svm)
r2_svm = r2_score(y_test, y_pred_svm)

#  Affichage des r√©sultats
print(f"üìä Gradient Boosting: MAE = {mae_gb:.2f}, R¬≤ = {r2_gb:.2f}")
print(f"üìä SVM: MAE = {mae_svm:.2f}, R¬≤ = {r2_svm:.2f}")

# Visualisation des pr√©dictions vs valeurs r√©elles
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred_gb, alpha=0.5, label="Gradient Boosting", color="blue")
plt.scatter(y_test, y_pred_svm, alpha=0.5, label="SVM", color="red")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color="black", linestyle="dashed")
plt.xlabel("Valeurs r√©elles")
plt.ylabel("Pr√©dictions")
plt.legend()
plt.title("Pr√©dictions vs Valeurs r√©elles")
plt.show()

"""# AirLine Delay Cause"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, r2_score

# Lecture du fichier CSV
df = pd.read_csv("Airline_Delay_Cause.csv")

# DISTRIBUTION DES RETARDS
plt.figure(figsize=(12, 6))
sns.histplot(df['arr_delay'].dropna(), bins=50, kde=True, color='blue')
plt.xlim(0, 20000)
plt.title("Distribution des retards des vols")
plt.xlabel("Dur√©e du retard (minutes)")
plt.ylabel("Nombre de vols")
plt.show()

# SUPPRESSION DES VALEURS ABERRANTES (99e PERCENTILE)
threshold = df['arr_delay'].quantile(0.99)
df_cleaned = df[df['arr_delay'] <= threshold]

# RETARDS MOYENS PAR MOIS
monthly_delays = df_cleaned.groupby('month')['arr_delay'].mean()
plt.figure(figsize=(10, 5))
sns.barplot(x=monthly_delays.index, y=monthly_delays.values, palette="Blues_r")
plt.title("Retard moyen des vols par mois")
plt.xlabel("Mois")
plt.ylabel("Retard moyen (minutes)")
plt.show()


# PR√âPARATION DES DONN√âES POUR LA MOD√âLISATION
features = ['month', 'carrier', 'airport', 'arr_flights', 'arr_cancelled', 'arr_diverted',
            'carrier_delay', 'weather_delay', 'nas_delay', 'security_delay', 'late_aircraft_delay']
target = 'arr_delay'

# Suppression des lignes avec valeurs manquantes
df_cleaned = df_cleaned.dropna(subset=features + [target])

# Encodage des variables cat√©goriques
label_enc_carrier = LabelEncoder()
label_enc_airport = LabelEncoder()
df_cleaned['carrier'] = label_enc_carrier.fit_transform(df_cleaned['carrier'])
df_cleaned['airport'] = label_enc_airport.fit_transform(df_cleaned['airport'])

# S√©paration Train/Test
X = df_cleaned[features]
y = df_cleaned[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalisation
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# MOD√âLISATION : GRADIENT BOOSTING & SVM
gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
svr_model = SVR(kernel='rbf')

gb_model.fit(X_train_scaled, y_train)
svr_model.fit(X_train_scaled, y_train)

# PR√âDICTIONS
y_pred_gb = gb_model.predict(X_test_scaled)
y_pred_svr = svr_model.predict(X_test_scaled)

# √âVALUATION DES MOD√àLES
mae_gb = mean_absolute_error(y_test, y_pred_gb)
r2_gb = r2_score(y_test, y_pred_gb)

mae_svr = mean_absolute_error(y_test, y_pred_svr)
r2_svr = r2_score(y_test, y_pred_svr)

print(f" Gradient Boosting - MAE: {mae_gb:.2f} min, R¬≤: {r2_gb:.2f}")
print(f" SVM - MAE: {mae_svr:.2f} min, R¬≤: {r2_svr:.2f}")

# IMPORTANCE DES VARIABLES (Gradient Boosting)
feature_importance = pd.Series(gb_model.feature_importances_, index=X.columns).sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importance.values, y=feature_importance.index, palette="Blues_r")
plt.title("Importance des variables dans la pr√©diction des retards")
plt.xlabel("Score d'importance")
plt.ylabel("Variables")
plt.show()